<section>
	<nav class="sub-nav clearfix">
		{{breadcrumbs}}
	</nav>
</section>

<div class="Vlt-card">
<section class="Vlt-grid">
	<section class="Vlt-col Vlt-col--2of3 Vlt-col--M-2of3">
		{{satisfaction}}
    
    
  
  <div class="Vlt-grid">
      <h3 class="requestSub Vlt-col">
        {{request.subject}}
      </h3>
      <span class="request-id Vlt-badge Vlt-bg-blue Vlt-badge--large Vlt-col--1of6">{{t 'request' request_number=request.id}}</span>
	</div>
		
  	<div>
  			<button class="Vlt-btn Vlt-btn--link Vlt-btn--secondary btn tooltip" onclick="initializeSession()" style="position:relative"> 
          <img src={{assignee.avatar_url}} />
         	 <span class="tooltiptext">Discuss live with {{assignee.name}}</span>
				</button>
		</div>
    
    <button id="startPublishingVideoId" class="button" onclick="toggleVideo()" style="position:relative">Turn Video off</button>
    
    <button id="handleRecording" class="button" onclick="handleRecording()" style="position:relative">Start video recording</button>
    
    <button id="startPublishingScreenId" class="button" onclick="screenShare()" style="position:relative">Share your screen</button>


    
    

<div id="videos" class="Vlt-grid Vlt-grid--narrow">
	<div class="Vlt-col Vlt-col--A-1of2">
		<div class="Vlt-form__element Vlt-form__element--big">
			<div class="Vlt-input">
       		 <div id="publisher" ></div>
			</div>
		</div>
	</div>
	<div class="Vlt-col Vlt-col--A-2of2">
		<div class="Vlt-form__element Vlt-form__element--big">
			<div class="Vlt-input">
       		 <div id="subscriber" ></div>
			</div>
		</div>
	</div>
</div>
  
    
    <div>
		<ul class="comment-list">
			{{#each comments}}
				<li id="{{anchor}}" class="comment">
					<div class="comment-container">
						<strong class="comment-author">{{author.name}}</strong>
						<span class="comment-published">{{date created_at}}</span>
						<div class="comment-body">{{body}}</div>
						{{#if attachments}}
							<ul class="attachment-list">
								{{#each attachments}}
									<li>
										<a href="{{url}}" target="_blank">{{name}}</a>
										<span>({{size}})</span>
									</li>
								{{/each}}
							</ul>
						{{/if}}
					</div>
				</li>
			{{/each}}
		</ul>
</div>
		{{pagination}}
		<div class="request-follow-up">
			{{comment_callout}}
		</div>

		{{#form 'comment' class='comment-form Form'}}
			<div class="comment-container">
        <div class="Vlt-textarea">{{textarea 'body' rows='4'}}</div>
				<div class="comment-attachments">
					{{upload}}
				</div>
				<div class="comment-form-controls clearfix">
					<div class="comment-mark-as-solved">
						{{checkbox 'mark_as_solved'}}
						{{label 'mark_as_solved'}}
					</div>
          <br />
          <p><small>Your data will be used in accordance with the Nexmo Limited <a href="https://www.nexmo.com/privacy-policy" target="_blank">Privacy Policy</a> which sets out the rights you have in respect of your data. We will process your data primarily to respond to your request and to provide you support services.</small></p>
					{{input class="Vlt-btn Vlt-btn--primary Vlt-btn--app" type='submit'}}
				</div>
			</div>
		{{/form}}
		{{chat_about_my_ticket}}
	</section>

	<section class="Vlt-col Vlt-col--M-1of3">
		<dl class="request-details">
			<dt>{{t 'submitted_by' requester_name=request.requester.name}}</dt>

			{{#form 'organization' id='request-organization' class="Form"}}
				<br/>
				<dt>{{t 'organization'}}</dt>
				<dd>
					{{select 'organization'}}
					<script>
						$(document).ready(function () {
							// Submit organization form when the value in the select changes
							$("#request-organization select").on("change", function () {
								$("#request-organization").submit();
							});
						});
					</script>
				</dd>
			{{/form}}

			{{#if group}}
				<dt>{{t 'group'}}</dt>
				<dd>
					<span>{{group.name}}</span>
				</dd>
			{{/if}}

			<dt>{{t 'status'}}</dt>
			<dd>
    <span class="request-status request-{{request.status}}" title="{{request.status_description}}">
		{{request.status_name}}
	</span>
			</dd>

			{{#if request.type}}
				<dt>{{t 'type'}}</dt>
				<dd>
      <span>
      {{request.type_name}}
		  {{#is request.type 'task'}}{{t 'task_due_date' due_date=request.due_date}}{{/is}}
      </span>
				</dd>
			{{/if}}

			{{#if request.priority}}
				<dt>{{t 'priority'}}</dt>
				<dd>
					<span>{{request.priority_name}}</span>
				</dd>
			{{/if}}

			{{#if assignee}}
				<dt>{{t 'assignee'}}</dt>
				<dd>
					<span>{{assignee.name}}</span>
				</dd>
			{{/if}}

			{{#each custom_fields}}
				<dt>{{title}}</dt>
				<dd>
					<span>{{value}}</span>
				</dd>
			{{/each}}

			{{#if attachments}}
				<dt>{{t 'attachments_heading'}}</dt>
				<dd>
					<ul class="attachment-list">
						{{#each attachments}}
							<li>
								<a href="{{url}}" target="_blank">{{name}}</a>
								<span>({{size}})</span>
							</li>
						{{/each}}
					</ul>
				</dd>
			{{/if}}

			{{#if collaborators}}
				<dt>{{t 'ccs'}}</dt>
				<dd>
					<span>{{t 'ccs_description'}}</span>
					<ul class="attachment-list">
						{{#each collaborators}}
							<li>{{name}}</li>
						{{/each}}
					</ul>
				</dd>
			{{/if}}
		</dl>
		{{link 'new_request' role='button' class="Vlt-btn Vlt-btn--secondary Vlt-btn--app"}}
	</section>
</section>
</div>
 <script src="https://static.opentok.com/v2/js/opentok.min.js"></script>
<script>
// session ID and token generation
  
let sessionId;
let publisher;
let archiveId;
let screenSharing = false;
let archiving = false;
let video = true;
 const SERVER_BASE_URL = 'https://b904a9e3e7fa.ngrok.io';
  
  const handleError = (error) => {
  if (error) {
    alert(error.message);
  }
}
  
fetch(SERVER_BASE_URL + '/room/' + {{request.requester.id}} + '-' +{{request.id}}).then(res => {
  return res.json()
}).then(res => {
  apiKey = res.apiKey;
  sessionId = res.sessionId;
  token = res.token;
}).catch(handleError);



// initialize session + session object creation
  
const initializeSession = () => {
  videos.style.display = 'block';
  session = OT.initSession(apiKey, sessionId);

  // Create a publisher
  publisher = OT.initPublisher('publisher', {
    insertMode: 'append',
    width: '100%',
    height: '100%',
  }, handleError);

  // Connect to the session
  session.connect(token, error => {
    // If the connection is successful, initialize a publisher and publish to the session
    if (error) {
      handleError(error);
    } else {
      session.publish(publisher, handleError);
    }
  });
  
  
    // Subscribe to a newly created stream once we're publishing
  session.on('streamCreated', (event) => {
    session.subscribe(event.stream, 'subscriber', {
      insertMode: 'append',
      width: '100%',
      height: '100%'
    }, handleError);
  });
  
    session.on('archiveStarted', event => {
            archiveID = event.id;
            archiving = true
            document.getElementById('handleRecording').innerHTML = 'Stop Archive';
            console.log('ARCHIVE STARTED ' + archiveID);
  });  

   session.on('archiveStopped',  event => {
            archiveID = event.id;
            archiving = false
            document.getElementById('handleRecording').innerHTML = 'Start Archive';
            console.log('ARCHIVE STOPED ' + archiveID);
  });  

  session.on("streamPropertyChanged", event => {
              console.log(event.newValue)
             video = event.newValue
             video ? document.getElementById("startPublishingVideoId").innerHTML = 'Turn Video off' : document.getElementById("startPublishingVideoId").innerHTML = 'Turn Video on';
            });

  session.on('streamCreated', event => {
    console.log('stream created' + event.stream)
    session.subscribe(event.stream, 'subscriber', {
      insertMode: 'append',

    }, handleError);
  });
  
  
  
  
}
  
const toggleVideo = () => {
video ? publisher.publishVideo(false) : publisher.publishVideo(true)

}

  let handleRecording =() => {
  archiving ? stopArchive() : startArchive();
  //setRecording( true );
}
  
const startArchive = () => {
  //
  console.log('start ')
  fetch(SERVER_BASE_URL +'/archive/start', {
    method: 'post',
    headers: {
      'Content-type': 'application/json'
    },
    body: JSON.stringify({
      'sessionId': sessionId
    })
  })
  .then((response) => {
    return response.json();
  })
  .then((data) => {
    console.log('data from server when starting archiving', data)
  })
  .catch(error => console.log('errror starting archive', error))
}
  
  
const stopArchive = () => {
  //
  console.log('stop')
  console.log("archiveID" + archiveID);
  fetch(SERVER_BASE_URL + '/archive/' + archiveID + '/stop', {
    method: 'post',
    headers: {
      'Content-type': 'application/json'
    }
  })
  .then((response) => {
    return response.json()
  })
  .then((data) => {
    console.log('data from server when stopping archiving', data)
  })
  .catch(error => console.log('errror stopping archive', error))
} 

let screenShare = () => {
  if (screenSharing === true){
         session.unpublish(screenPublisher)
       }
       else{
  OT.checkScreenSharingCapability(response => {
    if(!response.supported || response.extensionRegistered === false) {
      // This browser does not support screen sharing.
    } 
     else {
      // Screen sharing is available. Publish the screen.
      screenPublisher = OT.initPublisher('publisher',
        {videoSource: 'screen' , insertMode: 'after'},
        error => {
          if (error) {
            console.log(error)
          } else {
            session.publish(screenPublisher, error => {
              if (error) {
                console.log(error)
              }
            })
            .on("streamCreated", event => {  
              console.log("Publisher started streaming. " + event.stream.videoType)
                if (event.stream.videoType === 'screen'){
                  screenSharing = true;
                  document.getElementById("startPublishingScreenId").innerHTML = 'stop screenShare'
                }
              })
              .on("streamDestroyed", event => {
               if (event.stream.videoType === 'screen'){screenSharing = false
              document.getElementById("startPublishingScreenId").innerHTML = 'start screenShare'}
              console.log("Publisher stopped streaming.");
            });
          }
        }
      );
    }
  })
};

}
  
</script>
